{"version":3,"file":"luma-3d.min.js","sources":["../src/3d.js"],"sourcesContent":["/*!\r\n * Luma3D v0.3.0 - 3D Engine\r\n * Three.js-like 3D rendering for LumaJS\r\n * @license MIT\r\n */\r\n(function(global) {\r\n  'use strict';\r\n\r\n  // ==================== MATH UTILITIES ====================\r\n  \r\n  const Matrix4 = {\r\n    identity() {\r\n      return [\r\n        1, 0, 0, 0,\r\n        0, 1, 0, 0,\r\n        0, 0, 1, 0,\r\n        0, 0, 0, 1\r\n      ];\r\n    },\r\n    \r\n    perspective(fov, aspect, near, far) {\r\n      const f = 1.0 / Math.tan(fov / 2);\r\n      const nf = 1 / (near - far);\r\n      \r\n      return [\r\n        f / aspect, 0, 0, 0,\r\n        0, f, 0, 0,\r\n        0, 0, (far + near) * nf, -1,\r\n        0, 0, 2 * far * near * nf, 0\r\n      ];\r\n    },\r\n    \r\n    lookAt(eye, center, up) {\r\n      const z = this.normalize([eye[0] - center[0], eye[1] - center[1], eye[2] - center[2]]);\r\n      const x = this.normalize(this.cross(up, z));\r\n      const y = this.cross(z, x);\r\n      \r\n      return [\r\n        x[0], y[0], z[0], 0,\r\n        x[1], y[1], z[1], 0,\r\n        x[2], y[2], z[2], 0,\r\n        -this.dot(x, eye), -this.dot(y, eye), -this.dot(z, eye), 1\r\n      ];\r\n    },\r\n    \r\n    multiply(a, b) {\r\n      const result = [];\r\n      for (let i = 0; i < 4; i++) {\r\n        for (let j = 0; j < 4; j++) {\r\n          let sum = 0;\r\n          for (let k = 0; k < 4; k++) {\r\n            sum += a[i * 4 + k] * b[k * 4 + j];\r\n          }\r\n          result[i * 4 + j] = sum;\r\n        }\r\n      }\r\n      return result;\r\n    },\r\n    \r\n    translate(x, y, z) {\r\n      return [\r\n        1, 0, 0, 0,\r\n        0, 1, 0, 0,\r\n        0, 0, 1, 0,\r\n        x, y, z, 1\r\n      ];\r\n    },\r\n    \r\n    rotate(angle, axis) {\r\n      const c = Math.cos(angle);\r\n      const s = Math.sin(angle);\r\n      const t = 1 - c;\r\n      const [x, y, z] = this.normalize(axis);\r\n      \r\n      return [\r\n        t*x*x + c, t*x*y + z*s, t*x*z - y*s, 0,\r\n        t*x*y - z*s, t*y*y + c, t*y*z + x*s, 0,\r\n        t*x*z + y*s, t*y*z - x*s, t*z*z + c, 0,\r\n        0, 0, 0, 1\r\n      ];\r\n    },\r\n    \r\n    scale(x, y, z) {\r\n      return [\r\n        x, 0, 0, 0,\r\n        0, y, 0, 0,\r\n        0, 0, z, 0,\r\n        0, 0, 0, 1\r\n      ];\r\n    },\r\n    \r\n    normalize(v) {\r\n      const len = Math.sqrt(v[0]*v[0] + v[1]*v[1] + v[2]*v[2]);\r\n      return len > 0 ? [v[0]/len, v[1]/len, v[2]/len] : v;\r\n    },\r\n    \r\n    cross(a, b) {\r\n      return [\r\n        a[1]*b[2] - a[2]*b[1],\r\n        a[2]*b[0] - a[0]*b[2],\r\n        a[0]*b[1] - a[1]*b[0]\r\n      ];\r\n    },\r\n    \r\n    dot(a, b) {\r\n      return a[0]*b[0] + a[1]*b[1] + a[2]*b[2];\r\n    }\r\n  };\r\n\r\n  // ==================== SHADERS ====================\r\n  \r\n  const Shaders = {\r\n    basic: {\r\n      vertex: `\r\n        attribute vec3 position;\r\n        uniform mat4 modelMatrix;\r\n        uniform mat4 viewMatrix;\r\n        uniform mat4 projectionMatrix;\r\n        \r\n        void main() {\r\n          gl_Position = projectionMatrix * viewMatrix * modelMatrix * vec4(position, 1.0);\r\n        }\r\n      `,\r\n      fragment: `\r\n        precision mediump float;\r\n        uniform vec3 color;\r\n        \r\n        void main() {\r\n          gl_FragColor = vec4(color, 1.0);\r\n        }\r\n      `\r\n    },\r\n    \r\n    phong: {\r\n      vertex: `\r\n        attribute vec3 position;\r\n        attribute vec3 normal;\r\n        \r\n        uniform mat4 modelMatrix;\r\n        uniform mat4 viewMatrix;\r\n        uniform mat4 projectionMatrix;\r\n        uniform mat4 normalMatrix;\r\n        \r\n        varying vec3 vNormal;\r\n        varying vec3 vPosition;\r\n        \r\n        void main() {\r\n          vNormal = (normalMatrix * vec4(normal, 0.0)).xyz;\r\n          vec4 worldPosition = modelMatrix * vec4(position, 1.0);\r\n          vPosition = worldPosition.xyz;\r\n          gl_Position = projectionMatrix * viewMatrix * worldPosition;\r\n        }\r\n      `,\r\n      fragment: `\r\n        precision mediump float;\r\n        \r\n        uniform vec3 color;\r\n        uniform vec3 lightPosition;\r\n        uniform vec3 lightColor;\r\n        uniform vec3 ambientLight;\r\n        uniform vec3 cameraPosition;\r\n        \r\n        varying vec3 vNormal;\r\n        varying vec3 vPosition;\r\n        \r\n        void main() {\r\n          vec3 normal = normalize(vNormal);\r\n          vec3 lightDir = normalize(lightPosition - vPosition);\r\n          vec3 viewDir = normalize(cameraPosition - vPosition);\r\n          vec3 reflectDir = reflect(-lightDir, normal);\r\n          \r\n          // Ambient\r\n          vec3 ambient = ambientLight * color;\r\n          \r\n          // Diffuse\r\n          float diff = max(dot(normal, lightDir), 0.0);\r\n          vec3 diffuse = diff * lightColor * color;\r\n          \r\n          // Specular\r\n          float spec = pow(max(dot(viewDir, reflectDir), 0.0), 32.0);\r\n          vec3 specular = spec * lightColor * 0.5;\r\n          \r\n          vec3 result = ambient + diffuse + specular;\r\n          gl_FragColor = vec4(result, 1.0);\r\n        }\r\n      `\r\n    }\r\n  };\r\n\r\n  // ==================== GEOMETRIES ====================\r\n  \r\n  class BoxGeometry {\r\n    constructor(width = 1, height = 1, depth = 1) {\r\n      const w = width / 2, h = height / 2, d = depth / 2;\r\n      \r\n      this.vertices = new Float32Array([\r\n        // Front\r\n        -w, -h,  d,  w, -h,  d,  w,  h,  d, -w,  h,  d,\r\n        // Back\r\n        -w, -h, -d, -w,  h, -d,  w,  h, -d,  w, -h, -d,\r\n        // Top\r\n        -w,  h, -d, -w,  h,  d,  w,  h,  d,  w,  h, -d,\r\n        // Bottom\r\n        -w, -h, -d,  w, -h, -d,  w, -h,  d, -w, -h,  d,\r\n        // Right\r\n         w, -h, -d,  w,  h, -d,  w,  h,  d,  w, -h,  d,\r\n        // Left\r\n        -w, -h, -d, -w, -h,  d, -w,  h,  d, -w,  h, -d\r\n      ]);\r\n      \r\n      this.normals = new Float32Array([\r\n        0,0,1, 0,0,1, 0,0,1, 0,0,1,\r\n        0,0,-1, 0,0,-1, 0,0,-1, 0,0,-1,\r\n        0,1,0, 0,1,0, 0,1,0, 0,1,0,\r\n        0,-1,0, 0,-1,0, 0,-1,0, 0,-1,0,\r\n        1,0,0, 1,0,0, 1,0,0, 1,0,0,\r\n        -1,0,0, -1,0,0, -1,0,0, -1,0,0\r\n      ]);\r\n      \r\n      this.indices = new Uint16Array([\r\n        0,1,2, 0,2,3,\r\n        4,5,6, 4,6,7,\r\n        8,9,10, 8,10,11,\r\n        12,13,14, 12,14,15,\r\n        16,17,18, 16,18,19,\r\n        20,21,22, 20,22,23\r\n      ]);\r\n    }\r\n  }\r\n\r\n  class SphereGeometry {\r\n    constructor(radius = 1, widthSegments = 32, heightSegments = 16) {\r\n      const vertices = [];\r\n      const normals = [];\r\n      const indices = [];\r\n      \r\n      for (let y = 0; y <= heightSegments; y++) {\r\n        const v = y / heightSegments;\r\n        const phi = v * Math.PI;\r\n        \r\n        for (let x = 0; x <= widthSegments; x++) {\r\n          const u = x / widthSegments;\r\n          const theta = u * Math.PI * 2;\r\n          \r\n          const px = -radius * Math.cos(theta) * Math.sin(phi);\r\n          const py = radius * Math.cos(phi);\r\n          const pz = radius * Math.sin(theta) * Math.sin(phi);\r\n          \r\n          vertices.push(px, py, pz);\r\n          \r\n          const len = Math.sqrt(px*px + py*py + pz*pz);\r\n          normals.push(px/len, py/len, pz/len);\r\n        }\r\n      }\r\n      \r\n      for (let y = 0; y < heightSegments; y++) {\r\n        for (let x = 0; x < widthSegments; x++) {\r\n          const a = y * (widthSegments + 1) + x;\r\n          const b = a + widthSegments + 1;\r\n          \r\n          indices.push(a, b, a + 1);\r\n          indices.push(b, b + 1, a + 1);\r\n        }\r\n      }\r\n      \r\n      this.vertices = new Float32Array(vertices);\r\n      this.normals = new Float32Array(normals);\r\n      this.indices = new Uint16Array(indices);\r\n    }\r\n  }\r\n\r\n  class PlaneGeometry {\r\n    constructor(width = 1, height = 1) {\r\n      const w = width / 2, h = height / 2;\r\n      \r\n      this.vertices = new Float32Array([\r\n        -w, -h, 0,\r\n         w, -h, 0,\r\n         w,  h, 0,\r\n        -w,  h, 0\r\n      ]);\r\n      \r\n      this.normals = new Float32Array([\r\n        0, 0, 1,\r\n        0, 0, 1,\r\n        0, 0, 1,\r\n        0, 0, 1\r\n      ]);\r\n      \r\n      this.indices = new Uint16Array([0, 1, 2, 0, 2, 3]);\r\n    }\r\n  }\r\n\r\n  // ==================== MATERIALS ====================\r\n  \r\n  class Material {\r\n    constructor(options = {}) {\r\n      this.color = options.color || [1, 1, 1];\r\n      this.wireframe = options.wireframe || false;\r\n      this.shaderType = options.shaderType || 'phong';\r\n    }\r\n  }\r\n\r\n  // ==================== MESH ====================\r\n  \r\n  class Mesh {\r\n    constructor(geometry, material) {\r\n      this.geometry = geometry;\r\n      this.material = material;\r\n      this.position = [0, 0, 0];\r\n      this.rotation = [0, 0, 0];\r\n      this.scale = [1, 1, 1];\r\n      this.visible = true;\r\n    }\r\n    \r\n    getModelMatrix() {\r\n      let matrix = Matrix4.identity();\r\n      matrix = Matrix4.multiply(matrix, Matrix4.translate(...this.position));\r\n      matrix = Matrix4.multiply(matrix, Matrix4.rotate(this.rotation[0], [1, 0, 0]));\r\n      matrix = Matrix4.multiply(matrix, Matrix4.rotate(this.rotation[1], [0, 1, 0]));\r\n      matrix = Matrix4.multiply(matrix, Matrix4.rotate(this.rotation[2], [0, 0, 1]));\r\n      matrix = Matrix4.multiply(matrix, Matrix4.scale(...this.scale));\r\n      return matrix;\r\n    }\r\n  }\r\n\r\n  // ==================== LIGHTS ====================\r\n  \r\n  class Light {\r\n    constructor(color = [1, 1, 1], intensity = 1) {\r\n      this.color = color.map(c => c * intensity);\r\n    }\r\n  }\r\n\r\n  class AmbientLight extends Light {\r\n    constructor(color, intensity) {\r\n      super(color, intensity);\r\n    }\r\n  }\r\n\r\n  class DirectionalLight extends Light {\r\n    constructor(color, intensity) {\r\n      super(color, intensity);\r\n      this.position = [0, 10, 10];\r\n    }\r\n  }\r\n\r\n  class PointLight extends Light {\r\n    constructor(color, intensity, distance = 0) {\r\n      super(color, intensity);\r\n      this.position = [0, 0, 0];\r\n      this.distance = distance;\r\n    }\r\n  }\r\n\r\n  // ==================== CAMERA ====================\r\n  \r\n  class PerspectiveCamera {\r\n    constructor(fov = 75, aspect = 1, near = 0.1, far = 1000) {\r\n      this.fov = fov * Math.PI / 180;\r\n      this.aspect = aspect;\r\n      this.near = near;\r\n      this.far = far;\r\n      this.position = [0, 0, 5];\r\n      this.target = [0, 0, 0];\r\n      this.up = [0, 1, 0];\r\n    }\r\n    \r\n    getProjectionMatrix() {\r\n      return Matrix4.perspective(this.fov, this.aspect, this.near, this.far);\r\n    }\r\n    \r\n    getViewMatrix() {\r\n      return Matrix4.lookAt(this.position, this.target, this.up);\r\n    }\r\n    \r\n    lookAt(x, y, z) {\r\n      this.target = [x, y, z];\r\n    }\r\n  }\r\n\r\n  // ==================== SCENE ====================\r\n  \r\n  class Scene {\r\n    constructor() {\r\n      this.children = [];\r\n      this.lights = {\r\n        ambient: new AmbientLight([0.2, 0.2, 0.2], 1),\r\n        directional: new DirectionalLight([1, 1, 1], 0.8)\r\n      };\r\n    }\r\n    \r\n    add(object) {\r\n      this.children.push(object);\r\n    }\r\n    \r\n    remove(object) {\r\n      const index = this.children.indexOf(object);\r\n      if (index > -1) {\r\n        this.children.splice(index, 1);\r\n      }\r\n    }\r\n  }\r\n\r\n  // ==================== RENDERER ====================\r\n  \r\n  class WebGLRenderer {\r\n    constructor(options = {}) {\r\n      this.canvas = options.canvas || document.createElement('canvas');\r\n      this.width = options.width || 800;\r\n      this.height = options.height || 600;\r\n      this.canvas.width = this.width;\r\n      this.canvas.height = this.height;\r\n      \r\n      this.gl = this.canvas.getContext('webgl') || this.canvas.getContext('experimental-webgl');\r\n      \r\n      if (!this.gl) {\r\n        throw new Error('WebGL not supported');\r\n      }\r\n      \r\n      this.gl.enable(this.gl.DEPTH_TEST);\r\n      this.gl.enable(this.gl.CULL_FACE);\r\n      \r\n      this.programs = {};\r\n      this.buffers = new WeakMap();\r\n      \r\n      this._initShaders();\r\n    }\r\n    \r\n    _initShaders() {\r\n      for (const [name, shader] of Object.entries(Shaders)) {\r\n        this.programs[name] = this._createProgram(shader.vertex, shader.fragment);\r\n      }\r\n    }\r\n    \r\n    _createShader(type, source) {\r\n      const shader = this.gl.createShader(type);\r\n      this.gl.shaderSource(shader, source);\r\n      this.gl.compileShader(shader);\r\n      \r\n      if (!this.gl.getShaderParameter(shader, this.gl.COMPILE_STATUS)) {\r\n        console.error('Shader compile error:', this.gl.getShaderInfoLog(shader));\r\n        this.gl.deleteShader(shader);\r\n        return null;\r\n      }\r\n      \r\n      return shader;\r\n    }\r\n    \r\n    _createProgram(vertexSource, fragmentSource) {\r\n      const vertexShader = this._createShader(this.gl.VERTEX_SHADER, vertexSource);\r\n      const fragmentShader = this._createShader(this.gl.FRAGMENT_SHADER, fragmentSource);\r\n      \r\n      const program = this.gl.createProgram();\r\n      this.gl.attachShader(program, vertexShader);\r\n      this.gl.attachShader(program, fragmentShader);\r\n      this.gl.linkProgram(program);\r\n      \r\n      if (!this.gl.getProgramParameter(program, this.gl.LINK_STATUS)) {\r\n        console.error('Program link error:', this.gl.getProgramInfoLog(program));\r\n        return null;\r\n      }\r\n      \r\n      return program;\r\n    }\r\n    \r\n    _setupBuffers(geometry) {\r\n      if (this.buffers.has(geometry)) {\r\n        return this.buffers.get(geometry);\r\n      }\r\n      \r\n      const buffers = {\r\n        position: this.gl.createBuffer(),\r\n        normal: this.gl.createBuffer(),\r\n        index: this.gl.createBuffer()\r\n      };\r\n      \r\n      this.gl.bindBuffer(this.gl.ARRAY_BUFFER, buffers.position);\r\n      this.gl.bufferData(this.gl.ARRAY_BUFFER, geometry.vertices, this.gl.STATIC_DRAW);\r\n      \r\n      if (geometry.normals) {\r\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, buffers.normal);\r\n        this.gl.bufferData(this.gl.ARRAY_BUFFER, geometry.normals, this.gl.STATIC_DRAW);\r\n      }\r\n      \r\n      this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, buffers.index);\r\n      this.gl.bufferData(this.gl.ELEMENT_ARRAY_BUFFER, geometry.indices, this.gl.STATIC_DRAW);\r\n      \r\n      this.buffers.set(geometry, buffers);\r\n      return buffers;\r\n    }\r\n    \r\n    setSize(width, height) {\r\n      this.width = width;\r\n      this.height = height;\r\n      this.canvas.width = width;\r\n      this.canvas.height = height;\r\n      this.gl.viewport(0, 0, width, height);\r\n    }\r\n    \r\n    render(scene, camera) {\r\n      this.gl.clearColor(0.1, 0.1, 0.1, 1);\r\n      this.gl.clear(this.gl.COLOR_BUFFER_BIT | this.gl.DEPTH_BUFFER_BIT);\r\n      \r\n      const projectionMatrix = camera.getProjectionMatrix();\r\n      const viewMatrix = camera.getViewMatrix();\r\n      \r\n      for (const mesh of scene.children) {\r\n        if (!mesh.visible) continue;\r\n        \r\n        this._renderMesh(mesh, projectionMatrix, viewMatrix, camera, scene.lights);\r\n      }\r\n    }\r\n    \r\n    _renderMesh(mesh, projectionMatrix, viewMatrix, camera, lights) {\r\n      const program = this.programs[mesh.material.shaderType];\r\n      this.gl.useProgram(program);\r\n      \r\n      const buffers = this._setupBuffers(mesh.geometry);\r\n      const modelMatrix = mesh.getModelMatrix();\r\n      \r\n      // Position attribute\r\n      const positionLoc = this.gl.getAttribLocation(program, 'position');\r\n      this.gl.bindBuffer(this.gl.ARRAY_BUFFER, buffers.position);\r\n      this.gl.vertexAttribPointer(positionLoc, 3, this.gl.FLOAT, false, 0, 0);\r\n      this.gl.enableVertexAttribArray(positionLoc);\r\n      \r\n      // Normal attribute\r\n      if (mesh.geometry.normals) {\r\n        const normalLoc = this.gl.getAttribLocation(program, 'normal');\r\n        if (normalLoc >= 0) {\r\n          this.gl.bindBuffer(this.gl.ARRAY_BUFFER, buffers.normal);\r\n          this.gl.vertexAttribPointer(normalLoc, 3, this.gl.FLOAT, false, 0, 0);\r\n          this.gl.enableVertexAttribArray(normalLoc);\r\n        }\r\n      }\r\n      \r\n      // Uniforms\r\n      this._setUniform(program, 'modelMatrix', 'Matrix4fv', modelMatrix);\r\n      this._setUniform(program, 'viewMatrix', 'Matrix4fv', viewMatrix);\r\n      this._setUniform(program, 'projectionMatrix', 'Matrix4fv', projectionMatrix);\r\n      this._setUniform(program, 'normalMatrix', 'Matrix4fv', modelMatrix);\r\n      this._setUniform(program, 'color', '3fv', mesh.material.color);\r\n      \r\n      if (mesh.material.shaderType === 'phong') {\r\n        this._setUniform(program, 'lightPosition', '3fv', lights.directional.position);\r\n        this._setUniform(program, 'lightColor', '3fv', lights.directional.color);\r\n        this._setUniform(program, 'ambientLight', '3fv', lights.ambient.color);\r\n        this._setUniform(program, 'cameraPosition', '3fv', camera.position);\r\n      }\r\n      \r\n      // Draw\r\n      this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, buffers.index);\r\n      \r\n      if (mesh.material.wireframe) {\r\n        this.gl.drawElements(this.gl.LINES, mesh.geometry.indices.length, this.gl.UNSIGNED_SHORT, 0);\r\n      } else {\r\n        this.gl.drawElements(this.gl.TRIANGLES, mesh.geometry.indices.length, this.gl.UNSIGNED_SHORT, 0);\r\n      }\r\n    }\r\n    \r\n    _setUniform(program, name, type, value) {\r\n      const location = this.gl.getUniformLocation(program, name);\r\n      if (location !== null) {\r\n        if (type === 'Matrix4fv') {\r\n          this.gl.uniformMatrix4fv(location, false, value);\r\n        } else if (type === '3fv') {\r\n          this.gl.uniform3fv(location, value);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // ==================== ORBIT CONTROLS ====================\r\n  \r\n  class OrbitControls {\r\n    constructor(camera, canvas) {\r\n      this.camera = camera;\r\n      this.canvas = canvas;\r\n      this.radius = 5;\r\n      this.theta = 0;\r\n      this.phi = Math.PI / 4;\r\n      this.autoRotate = false;\r\n      this.autoRotateSpeed = 0.01;\r\n      \r\n      this._setupEventListeners();\r\n      this.update();\r\n    }\r\n    \r\n    _setupEventListeners() {\r\n      let isDragging = false;\r\n      let lastX = 0, lastY = 0;\r\n      \r\n      this.canvas.addEventListener('mousedown', (e) => {\r\n        isDragging = true;\r\n        lastX = e.clientX;\r\n        lastY = e.clientY;\r\n      });\r\n      \r\n      this.canvas.addEventListener('mousemove', (e) => {\r\n        if (!isDragging) return;\r\n        \r\n        const deltaX = e.clientX - lastX;\r\n        const deltaY = e.clientY - lastY;\r\n        \r\n        this.theta += deltaX * 0.01;\r\n        this.phi = Math.max(0.1, Math.min(Math.PI - 0.1, this.phi + deltaY * 0.01));\r\n        \r\n        lastX = e.clientX;\r\n        lastY = e.clientY;\r\n        \r\n        this.update();\r\n      });\r\n      \r\n      this.canvas.addEventListener('mouseup', () => {\r\n        isDragging = false;\r\n      });\r\n      \r\n      this.canvas.addEventListener('wheel', (e) => {\r\n        e.preventDefault();\r\n        this.radius = Math.max(2, Math.min(20, this.radius + e.deltaY * 0.01));\r\n        this.update();\r\n      });\r\n    }\r\n    \r\n    update() {\r\n      if (this.autoRotate) {\r\n        this.theta += this.autoRotateSpeed;\r\n      }\r\n      \r\n      this.camera.position = [\r\n        this.radius * Math.sin(this.phi) * Math.cos(this.theta),\r\n        this.radius * Math.cos(this.phi),\r\n        this.radius * Math.sin(this.phi) * Math.sin(this.theta)\r\n      ];\r\n      \r\n      this.camera.lookAt(0, 0, 0);\r\n    }\r\n  }\r\n\r\n  // ==================== PUBLIC API ====================\r\n  \r\n  const Luma3D = {\r\n    // Core\r\n    Scene,\r\n    PerspectiveCamera,\r\n    WebGLRenderer,\r\n    Mesh,\r\n    \r\n    // Geometries\r\n    BoxGeometry,\r\n    SphereGeometry,\r\n    PlaneGeometry,\r\n    \r\n    // Materials\r\n    Material,\r\n    \r\n    // Lights\r\n    AmbientLight,\r\n    DirectionalLight,\r\n    PointLight,\r\n    \r\n    // Controls\r\n    OrbitControls,\r\n    \r\n    // Utils\r\n    Matrix4,\r\n    \r\n    // Version\r\n    version: '0.3.0'\r\n  };\r\n\r\n  // Export\r\n  if (typeof module !== 'undefined' && module.exports) {\r\n    module.exports = Luma3D;\r\n  } else {\r\n    global.Luma3D = Luma3D;\r\n  }\r\n\r\n})(typeof window !== 'undefined' ? window : globalThis);\r\n"],"names":["global","Matrix4","identity","perspective","fov","aspect","near","far","f","Math","tan","nf","lookAt","eye","center","up","z","this","normalize","x","cross","y","dot","multiply","a","b","result","i","j","sum","k","translate","rotate","angle","axis","c","cos","s","sin","t","scale","v","len","sqrt","Shaders","basic","vertex","fragment","phong","Light","constructor","color","intensity","map","AmbientLight","super","DirectionalLight","position","Luma3D","Scene","children","lights","ambient","directional","add","object","push","remove","index","indexOf","splice","PerspectiveCamera","PI","target","getProjectionMatrix","getViewMatrix","WebGLRenderer","options","canvas","document","createElement","width","height","gl","getContext","Error","enable","DEPTH_TEST","CULL_FACE","programs","buffers","WeakMap","_initShaders","name","shader","Object","entries","_createProgram","_createShader","type","source","createShader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","console","error","getShaderInfoLog","deleteShader","vertexSource","fragmentSource","vertexShader","VERTEX_SHADER","fragmentShader","FRAGMENT_SHADER","program","createProgram","attachShader","linkProgram","getProgramParameter","LINK_STATUS","getProgramInfoLog","_setupBuffers","geometry","has","get","createBuffer","normal","bindBuffer","ARRAY_BUFFER","bufferData","vertices","STATIC_DRAW","normals","ELEMENT_ARRAY_BUFFER","indices","set","setSize","viewport","render","scene","camera","clearColor","clear","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","projectionMatrix","viewMatrix","mesh","visible","_renderMesh","material","shaderType","useProgram","modelMatrix","getModelMatrix","positionLoc","getAttribLocation","vertexAttribPointer","FLOAT","enableVertexAttribArray","normalLoc","_setUniform","wireframe","drawElements","LINES","length","UNSIGNED_SHORT","TRIANGLES","value","location","getUniformLocation","uniformMatrix4fv","uniform3fv","Mesh","rotation","matrix","BoxGeometry","depth","w","h","d","Float32Array","Uint16Array","SphereGeometry","radius","widthSegments","heightSegments","phi","theta","px","py","pz","PlaneGeometry","Material","PointLight","distance","OrbitControls","autoRotate","autoRotateSpeed","_setupEventListeners","update","isDragging","lastX","lastY","addEventListener","e","clientX","clientY","deltaX","deltaY","max","min","preventDefault","version","module","exports","window","globalThis"],"mappings":"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"}