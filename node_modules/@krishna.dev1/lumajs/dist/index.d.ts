/**
 * LumaJS TypeScript Definitions
 * React-like component framework
 * @version 0.1.0
 */

// ==================== VIRTUAL DOM ====================

export type VNodeType = string | FunctionComponent<any>;

export interface VNode {
  type: VNodeType;
  props: Props;
  children: VNode[];
  text?: string;
}

export interface Props {
  [key: string]: any;
  children?: VNode | VNode[];
  key?: string | number;
  className?: string;
  style?: Partial<CSSStyleDeclaration> | { [key: string]: string | number };
}

// ==================== COMPONENTS ====================

export type FunctionComponent<P = {}> = (props: P) => VNode;

export type ComponentType<P = any> = FunctionComponent<P>;

// ==================== HOOKS ====================

export type SetStateAction<S> = S | ((prevState: S) => S);
export type Dispatch<A> = (value: A) => void;

/**
 * useState hook - Returns stateful value and updater function
 */
export function useState<S = any>(
  initialState: S | (() => S)
): [S, Dispatch<SetStateAction<S>>];

/**
 * useEffect hook - Runs side effects after render
 */
export function useEffect(
  effect: () => void | (() => void),
  deps?: ReadonlyArray<any>
): void;

/**
 * useRef hook - Returns mutable ref object
 */
export function useRef<T = any>(initialValue: T): { current: T };

/**
 * useMemo hook - Memoizes computed value
 */
export function useMemo<T>(
  factory: () => T,
  deps: ReadonlyArray<any>
): T;

/**
 * useCallback hook - Memoizes callback function
 */
export function useCallback<T extends Function>(
  callback: T,
  deps: ReadonlyArray<any>
): T;

// ==================== CORE API ====================

/**
 * Creates a virtual DOM node (hyperscript)
 * @param type - Element type or component
 * @param props - Element properties
 * @param children - Child nodes
 * @returns Virtual DOM node
 */
export function h(
  type: VNodeType,
  props?: Props | null,
  ...children: (VNode | string | number | boolean | null | undefined)[]
): VNode;

/**
 * Renders a VNode to a DOM container
 * @param vnode - Virtual DOM node to render
 * @param container - Target container (selector or element)
 */
export function render(
  vnode: VNode,
  container: string | HTMLElement
): void;

/**
 * Fragment component for grouping children without extra DOM nodes
 */
export const Fragment: FunctionComponent<{ children?: VNode[] }>;

/**
 * Creates a real DOM element from a VNode
 * @param vnode - Virtual DOM node
 * @returns DOM element
 */
export function createElement(vnode: VNode): HTMLElement | Text;

// ==================== MAIN API ====================

export interface LumaAPI {
  // Core
  h: typeof h;
  render: typeof render;
  Fragment: typeof Fragment;
  createElement: typeof createElement;
  
  // Hooks
  useState: typeof useState;
  useEffect: typeof useEffect;
  useRef: typeof useRef;
  useMemo: typeof useMemo;
  useCallback: typeof useCallback;
  
  // Version
  version: string;
}

declare const Luma: LumaAPI;

export default Luma;

// Global declaration for UMD build
declare global {
  interface Window {
    Luma: LumaAPI;
  }
}

// JSX Support (optional, for when using with Babel/TypeScript JSX)
declare namespace JSX {
  interface Element extends VNode {}
  interface ElementClass {
    render(): VNode;
  }
  interface IntrinsicElements {
    [elemName: string]: any;
  }
}
